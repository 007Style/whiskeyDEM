/*
 * ControlJPanel.java
 */
 
import javax.vecmath.*;
import java.lang.*;
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
import javax.swing.*;
import java.io.*;
import java.net.*;
import javax.*;
import java.util.*;


public class ControlJPanel extends javax.swing.JPanel implements PositionListener, Runnable
{
  private Thread m_thread;
  private Dem m_dem = null;
  private MainViewJPanel m_mainView = null;
  static worldServer flightServer = null;
  static worldClient flightClient = null;
  static nioWorldServer nioFlightServer = null;
  static nioWorldClient nioFlightClient = null;
  static Process Kt = null;
  static Process Kc = null;
  static int isClient = 0;
  static int isServer = 0;
  static boolean forceSync = false;

  /** Creates new form ControlJPanel */
  public ControlJPanel() 
  {
    initComponents ();
    m_thread = new Thread(this);
    m_thread.start();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
      asimuthJLabel = new javax.swing.JLabel();
      speedJLabel = new javax.swing.JLabel();
      altitudeJLabel = new javax.swing.JLabel();
      btnOptions = new javax.swing.JButton();
      asimuthGauge = new javax.swing.JLabel();
      speedGauge = new javax.swing.JLabel();
      altitudeGauge = new javax.swing.JLabel();
      btnHelp = new javax.swing.JButton();
      btnNetwork = new javax.swing.JButton();
      btnCommands = new javax.swing.JButton();
      btnIpKchat = new javax.swing.JButton();
      btnIpKtalk = new javax.swing.JButton();
      
      setLayout(new java.awt.GridLayout(2, 5));
      
      addComponentListener(new java.awt.event.ComponentAdapter() {
          public void componentShown(java.awt.event.ComponentEvent evt) {
              formComponentShown(evt);
          }
          public void componentHidden(java.awt.event.ComponentEvent evt) {
              formComponentHidden(evt);
          }
      });
      
      asimuthJLabel.setText("Asimuth:");
      asimuthJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      add(asimuthJLabel);
      
      speedJLabel.setText("Speed:");
      speedJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      add(speedJLabel);
      
      altitudeJLabel.setText("Altitude:");
      altitudeJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      add(altitudeJLabel);
      
      btnCommands.setText("Client Connect");
      btnCommands.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
              btnCommandsActionPerformed(evt);
          }
      });
      
      add(btnCommands);
     
      btnNetwork.setText("Start Server");
      btnNetwork.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
              btnNetworkActionPerformed(evt);
          }
      });
      
      add(btnNetwork);
      
      //Image icon = getToolkit().getImage("chat.gif");
      ImageIcon iconChat = new ImageIcon("chat.gif");
      btnIpKchat.setText("ipKchat");
      btnIpKchat.setIcon(iconChat);
      btnIpKchat.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
              btnIpkChatActionPerformed(evt);
          }
      });
      
      add(btnIpKchat);
      
      
      asimuthGauge.setText("AsimuthGauge");
      asimuthGauge.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      asimuthGauge.setName("asimuthGage");
      add(asimuthGauge);
      
      speedGauge.setText("SpeedGauge");
      speedGauge.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      speedGauge.setName("speedGauge");
      add(speedGauge);
      
      altitudeGauge.setText("AltitudeGauge");
      altitudeGauge.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      add(altitudeGauge);
      
      btnHelp.setText("Help");
      btnHelp.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
              btnHelpActionPerformed(evt);
          }
      });
      
      add(btnHelp);
      
      btnOptions.setText("Options");
      btnOptions.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
              btnOptionsActionPerformed(evt);
          }
      });
      
      add(btnOptions);
      
      ImageIcon iconTalk = new ImageIcon("talk.gif");
      btnIpKtalk.setText("ipKtalk");
      btnIpKtalk.setIcon(iconTalk);
      btnIpKtalk.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
              btnIpkTalkActionPerformed(evt);
          }
      });
      
      add(btnIpKtalk);
      
      
  }//GEN-END:initComponents

  private void btnOptionsActionPerformed(java.awt.event.ActionEvent evt) {
    new DlgOptions(m_dem, m_mainView).setVisible(true);
  }
  
  private void btnIpkTalkActionPerformed(java.awt.event.ActionEvent evt) {
    try 
    {
      Kt = Runtime.getRuntime().exec("java ipKtalk -t " + ProgramConfig.getServerName());
    } 
    catch (Exception e) {}   	
  }
  
  private void btnIpkChatActionPerformed(java.awt.event.ActionEvent evt) {
  	try 
    {
      Kc = Runtime.getRuntime().exec("java ipKchat");
    } 
    catch (Exception e) {}  
  }

  private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {
    new DlgHelp("overview").setVisible(true);
  }
    
  private void btnNetworkActionPerformed(java.awt.event.ActionEvent evt) {
      // Add your handling code here:
      //System.out.println("Network");
      btnCommands.setEnabled(false);
      btnNetwork.setEnabled(false);
      //m_mainView.m_movementModel.adjustSpeedStimulus(true);
      if(ProgramConfig.getSimType() == 0)
      {
      	flightServer = new worldServer(this);
      	flightServer.start();
      }
      if(ProgramConfig.getSimType() == 1)
      {
      	nioFlightServer = new nioWorldServer(this);
      	nioFlightServer.start();
      }
      isServer = 1;
  }
  
  private void btnCommandsActionPerformed(java.awt.event.ActionEvent evt) {
      // Add your handling code here:
      //System.out.println("Commands");
      //btnCommands.setEnabled(false);
      //btnNetwork.setEnabled(false);
      m_mainView.resetAll();
      m_mainView.m_movementModel.adjustSpeedStimulus(true);
      if(ProgramConfig.getSimType() == 0)
      {
 				flightClient = new worldClient(this);
 				flightClient.doDaWork();  
 			}
 			if(ProgramConfig.getSimType() == 1)
      {
      	nioFlightClient = new nioWorldClient(this);
 				nioFlightClient.doDaWork();  
      }
 			isClient = 1;
 			//System.out.println("Cheat CommandoS");  
  }//GEN-LAST:event_btnHelpActionPerformed


  private void formComponentShown (java.awt.event.ComponentEvent evt) {
// Add your handling code here:
  }//GEN-LAST:event_formComponentShown

  private void formComponentHidden (java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
// Add your handling code here:
  }//GEN-LAST:event_formComponentHidden

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel asimuthJLabel;
  private javax.swing.JLabel speedJLabel;
  private javax.swing.JLabel altitudeJLabel;
  private javax.swing.JButton btnOptions;
  private javax.swing.JLabel asimuthGauge;
  private javax.swing.JLabel speedGauge;
  private javax.swing.JLabel altitudeGauge;
  private javax.swing.JButton btnHelp;
  public  javax.swing.JButton btnNetwork;
  public  javax.swing.JButton btnCommands;
  private javax.swing.JButton btnIpKchat;
  private javax.swing.JButton btnIpKtalk;
  // End of variables declaration//GEN-END:variables

  public void setDem(Dem dem)
  {
    m_dem = dem;
  }
  
  public void setMainView(MainViewJPanel panel)
  {
    m_mainView = panel;
  }
  
  public void setAltitude(Point3d planePos)  // meters
  {
    final double FEET_PER_METER = 0.305;
    double ft = planePos.z / FEET_PER_METER;
    int iAltitudeAbs = (int)ft;
    int iAltitudeRel = iAltitudeAbs;
    int iTerrainHeight = 0;
    if(m_dem != null) {
      iTerrainHeight = (int)(m_dem.getHeight(planePos.x, planePos.y) / FEET_PER_METER);
      iAltitudeRel -= iTerrainHeight;
    }
    //altitudeGauge.setText("" + iAltitudeAbs + "=" + iTerrainHeight + "+" + iAltitudeRel  + " ft");
    altitudeGauge.setText("" + iAltitudeAbs + " ft");
  }

  public void setSpeed(double speed)  // meters per second
  {
    // convert speed to mph:
    double mph = speed * 3600.0 / 1600.0;
    int iSpeed = (int)mph;
    speedGauge.setText("" + iSpeed + " mph");
  }

  public void setAsimuth(double asimuth)  // radians to North
  {
    double grads = asimuth / Math.PI * 360.0;
    int iAsimuth = (int)grads;
    asimuthGauge.setText("" + iAsimuth);
  }

  private double m_distanceTraveled = 0;
  
  public void positionChanged(PositionEvent posEvent)
  {
    Point3d planePos = posEvent.getNewPos();
    double distanceTraveled = posEvent.getDistanceTraveled();
    
    setAltitude(planePos);
    m_distanceTraveled += distanceTraveled;
    Vector3d travel = posEvent.getTravel();
    Vector3d travelXY = new Vector3d(travel.x, travel.y, 0.0);
    Vector3d axisY = new Vector3d(0.0, 1.0, 0.0);
    double asimuth = axisY.angle(travelXY);
    if(travel.x < 0.0) {
      asimuth = -asimuth;
    }
    setAsimuth(asimuth);
  }
  
  public void run()
  {
    while(true) {
      try {
        Thread.sleep(1000);
        // at this moment m_distanceTraveled accumulated meters traveled for the last second.
        setSpeed(m_distanceTraveled);
        m_distanceTraveled = 0.0;
      } catch(Exception e) {
        System.out.println("Exception in run(): " + e);
        e.printStackTrace();
      }
    }
  }
}